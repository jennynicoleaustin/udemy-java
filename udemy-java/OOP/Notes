Reference vs Object vs Instance vs Class - in Java programming

Class = blueprint for the house

Instance = each object that has been built aka that you "Instantiate using "new" operator"
-- these are the houses(objects) that you build based on the blueprints(class).

Reference = like an address the physical location for the house
-- references can be passed as parameters to constructors and methods.

The instances (houses/objects) are built in the Main class
-- instance variable aka fields

Objects are created with the "new" keyword
-- if you change the color of one reference both references will change.

-- you're able to change the reference to point to different objects.

You cannot access an object in memory directly rather you use the reference to the object in order to access the object in memory

:::: THIS vs SUPER ::::

Super keyword - used to call parent class members (variables and methods)
this keyword - calls the current class members
                ---- required when we have the same name as an instance variable (field).

both super and this can be used anywhere in a class except where STATIC is used (static block or method)

only way to call a parent constructor is via the super() keyword --
    -- super must be the first statement in the constructor

Abstract classes also have constructors
    -- although the new keyword is NOT used to instantiate an abstract class.

    -- since an abstract class is a super class, its constructors will run when an new instance of a concrete subclass is made

Constructors can call this() or super() but NEVER both.

Constructor chaining
 -- don't initialize variables until the last constructor.

::: METHOD OVERLOADING VS OVERRIDING :::::

Overloading
-- method with the same name and different number of parameters.

Overriding
-- both static and instance methods can be overloaded


::: Static vs Instance ::::

Static
    -- used when we don't need to access information from instance of the class
    -- static cannot access instance methods and instances variables directly
    -- no access to the this keyword
    -- variables or methods that do not use the .this keyword should be declared as static
    Only require the ClassName.method to access, no need to use the this keyword

Static variables
    -- every instance of the class shares the same static variable

Uses for static variables
-- Scanner class declared as a static variable

this = current instance of a class


